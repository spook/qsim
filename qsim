#!/usr/bin/perl -w
# Style note: I prefix sub's in packages with the package name,
#   such as queue::new { ... } instead of just sub new { ... } .
#   Perl doesn't require this, but I find it keeps it easier to follow
#   since there's several packages (scopes) in this one file.
use v5.10.0;
use strict;
use utf8;
use Term::ANSIScreen qw/:color :cursor :screen :constants/;
use Term::ReadKey;
use Time::HiRes qw/usleep/;

$| = 1;
my $T            = 0;       # Simulated time (seconds)
my $X            = 30;      # Speed factor
my $JOB_PRIO     = 2;       # Job priority for added (j/J)obs
my $N_JOB        = 0;       # Number of jobs to add for j/J
my $QALG         = \&alg1;  # Sorting algorithm under test

# Set b/g
binmode STDOUT, ":utf8";
print cls, locate(24, 1), WHITE ON BLACK, clup;
print "(Q)uit (F)aster (S)lower (P)ause .=Step (c)lear (a)lg#  (t)un   Add (j/J)obs", clline;

# Inits
my $tun = tunnel->new;
my $que = queue->new($tun);
for (1 .. 35) {
    my $job = job->new;
    $que->submit($job);
}

# Run until nothing in pending or running stated
ReadMode 'raw';
my $pause = 0;
while (1) {

    # Check for keyboard keystroke
    my $key = ReadKey(-1) // q{};       # Grab a keystroke, if any. (/)
    last     if $key eq "\x03";         # Ctrl-C = quit
    last     if lc($key) eq 'q';        # Quit
    $X++     if $key eq 'f';            # Faster
    $X += 10 if $key eq 'F';            # Faster by 10
    $X--     if $key eq 's';            # Slower
    $X -= 10 if $key eq 'S';            # Slower by 10
    minmax($X, 1, 250);
    $JOB_PRIO = 1    if $key eq 'h';    # Jobs to add will be high priority
    $JOB_PRIO = 2    if $key eq 'm';    # Jobs to add will be medium priority
    $JOB_PRIO = 3    if $key eq 'l';    # Jobs to add will be low priority
    add_job($que)    if $key eq 'j';    # add small jobs
    add_job($que, 1) if $key eq 'J';    # add big jobs
    $que->clear()    if $key eq 'c';    # flush the q
    $tun->flip()     if $key eq 't';    # toggle tunnel state

    # Process digits for job count
    if (($key ge '0') && ($key le '9')) {
        my $val = $key - '0';
        $N_JOB = $N_JOB * 10 + $val;
        minmax($N_JOB, 1, 999);
    }
    if (($key eq "\x{7f}") && $N_JOB) { # 7f is backspace key
        $N_JOB = $N_JOB == 1 ? 0
               : $N_JOB < 10 ? 1
               :               int($N_JOB / 10);
    }

    # Job-selection algorithm to use - rotate thru them
    if ($key eq 'a') {
        $QALG = ($QALG == \&alg0) ? \&alg1
              : ($QALG == \&alg1) ? \&alg2
              : ($QALG == \&alg2) ? \&alg3
#              : ($QALG == \&alg3) ? \&alg4
              :                     \&alg0
              ;
    }

    # Pause toggle
    $pause = !$pause if lc($key) eq 'p';
    $pause = 1 if $key eq '.';  # Set pause for next pass
    if ($pause && ($key ne '.')) {  # .=step one time thru
        usleep 100_000;
        status($que);
        next;
    }

    # Run another step
    usleep int(1_000_000 / $X);
    ++$T;
    $que->tick();
    $tun->tick();
    status($que);

}

# Reset & done
print locate(24, 1), RESET, clline;
ReadMode 'normal';
exit 0;

# Sorting algorithm zero - no sorting at all
sub alg0 {
    return 0 if !@_;    # Return algorithm number if no args given
    return 0;
}

# Sorting algorithm one - priority only
sub alg1 {
    return 1 if !@_;    # Return algorithm number if no args given
    my ($a, $b) = @_;
    return $a->{prio} <=> $b->{prio};
}

# Sorting algorithm two - priority else jid, no regard for trun
sub alg2 {
    return 2 if !@_;    # Return algorithm number if no args given
    my ($a, $b) = @_;
    return ($a->{prio} <=> $b->{prio})
        || ($a->{jid}  <=> $b->{jid})
        ;
}

# Sorting algorithm three - priority else trun else jid
sub alg3 {
    return 3 if !@_;    # Return algorithm number if no args given
    my ($a, $b) = @_;
    return ($a->{prio} <=> $b->{prio})
        || ($a->{trun} <=> $b->{trun})
        || ($a->{jid}  <=> $b->{jid})
        ;
}


sub add_job {
    my $que = shift;
    my $big = shift;
    for (1 .. ($N_JOB || 1)) {
        my $job = job->new;
        $job->{size} = $big ? 512_000_000 : 10_000;
        $job->{prio} = $JOB_PRIO;
        $que->submit($job);
    }
    $N_JOB    = 0;
}

# This sets bounds on the given scalar; IT DIRECTLY MODIFIES THE GIVEN VALUE on purpose.
# Call like:   minmax($percent, 0, 100)
sub minmax {
    return $_[0] = $_[1] if defined $_[1] && $_[0] < $_[1];
    return $_[0] = $_[2] if defined $_[2] && $_[0] > $_[2];
    return $_[0];
}

sub status {
    my $que = shift;
    print locate(1, 1), BLACK ON WHITE, clline;

    # Simulated time
    my $t = $T;
    my $d = int($t / (24 * 60 * 60));
    $t -= $d * 24 * 60 * 60;
    my $h = int($t / (60 * 60));
    $t -= $h * 60 * 60;
    my $m = int($t / 60);
    my $s = $t - $m * 60;
    print locate(1, 1), sprintf("%3.3d %2.2d:%2.2d:%2.2d %3dX", $d, $h, $m, $s, $X);

    # Queue
    my ($np, $nr, $maxr, $nf, $nd, $tot) = $que->depths();
    print locate(1, 20),
        sprintf("%d pend, %d/%d run, %d fail, %d done, %d total", $np, $nr, $maxr, $nf, $nd, $tot);
    print(locate(1, 66), sprintf("n=%d", $N_JOB)) if $N_JOB;
    print(locate(1, 75), "Alg=", &$QALG());
    print(locate(1, 72), 
            $JOB_PRIO == 1 ? RED "hi" : $JOB_PRIO == 2 ? GREEN "md" : BLACK "lo");

}

package state;

use constant JOB_PEND => 1;    # Pending, new
use constant JOB_RUN  => 2;    # Pending, requeued
use constant JOB_FAIL => 3;    # Job died
use constant JOB_DONE => 4;    # Job finished OK

use constant SUB_INIT => 0;    # Initializing handshake
use constant SUB_XFER => 1;    # transferring
use constant SUB_WRAP => 2;    # wrapup phase

use constant TUN_DN => 0;
use constant TUN_UP => 1;

package queue;
use strict;
use utf8;
use Term::ANSIScreen qw/:color :cursor :screen :constants/;

sub queue::new {
    my $proto  = shift;
    my $class  = ref($proto) || $proto;    # Get the class name
    my $tunnel = shift;
    my $this   = {
        tunnel  => $tunnel,
        qpend   => [],
        qrun    => [],
        qfail   => [],
        qdone   => [],
        count   => 0,                      # total count of jobs we've ever processed
        maxpend => 100,                    # max pending that we'll show - queue can grow larger tho
        maxrun  =>   5,                    # max jobs that can run at a time
        maxdone => 140,                    # max done jobs we keep around; we purge after this
        maxfail =>  60,                    # max failed jobs we keep around; we purge after this
        polling =>  30,                    # check for free slots every n seconds/ticks
    };
    bless $this, $class;
    $this->draw();
    return $this;
}

sub queue::depths {
    my $this = shift;
    return (
        scalar(@{$this->{qpend}}), scalar(@{$this->{qrun}}),  $this->{maxrun},
        scalar(@{$this->{qfail}}), scalar(@{$this->{qdone}}), $this->{count}
    );
}

sub queue::draw {
    my $this = shift;

    print BLUE ON BLACK;
    print locate(5, 22), "╲";
    print locate(6, 22), "╱";

    print WHITE, UNDERLINE;
    print locate(3, 2),  "      Pending      ";
    print locate(3, 24), "Run";
    print locate(3, 40), "           Done            ";
    print locate(3, 69), "   Fail    ";
}

sub queue::clear {
    my $this = shift;
    my @jobs = (@{$que->{qpend}}, @{$que->{qrun}}, @{$que->{qfail}}, @{$que->{qdone}});
    foreach (@jobs) {
        $_->erase() if $_;
    }
    $que->{qpend} = [];
    $que->{qrun}  = [];
    $que->{qfail} = [];
    $que->{qdone} = [];
    $que->{count} = 0;

    $T = 0;
    job::clear_jid();
}

# Insert a job into the queue
#  for head posn=0; for tail posn=-1, sorted posn=undef which is default
sub queue::insert {
    my $this = shift;
    my $job  = shift;
    my $posn = shift;    # 0-based

    $job->{queue} = $this;
    my $subq = $this->whichq($job->{state});
    $posn = where($subq, $job) if !defined $posn;
    $posn += @$subq + 1 if $posn < 0;

    splice @$subq, $posn, 0, $job;    # Splice it in
    for my $i ($posn .. $#$subq) {
        $subq->[$i]->{posn} = $i;
        $subq->[$i]->draw();
    }

    # Limit DONE and FAIL queues to only keep the M tail jobs
    my $max = $job->{state} == state::JOB_DONE ? $this->{maxdone}
            : $job->{state} == state::JOB_FAIL ? $this->{maxfail}
            : 0 ;
    if ($max && @$subq > $max) {
        shift @$subq;
        # Sadly, we have to redraw the whole lot, changing their {posn}
        foreach my $j (@$subq) {
            $j->{posn}--;
            $j->draw;
        }
    }
}

# Move a job into a new state
sub queue::move_job {
    my $this  = shift;
    my $job   = shift;                # Job to move
    my $state = shift;                # New state for the job
    my $posn  = shift;                # 0-based, head posn=0; for tail posn=-1, sorted posn=undef
    return if $job->{state} == $state;    # no-op

    $this->remove($job);
    $job->{state} = $state;
    if ($state == state::JOB_RUN) {
        $job->{tries}++;
        $job->{substate} = state::SUB_INIT;
    }
    $this->insert($job, $posn);
}

#job = queue::remove($job)
sub queue::remove {
    my $this  = shift;
    my $job   = shift;
    my $state = $job->{state};
    my $posn  = $job->{posn};         # 0-based
    return $job if !defined $posn;

    my $subq = $this->whichq($state);
    $subq->[$#$subq]->erase();        # Erase from the display, whatever is at the end
    splice @$subq, $posn, 1;          # Yank the job out of the subqueue
    for my $i ($posn .. $#$subq) {    # Bubble-up the remaining jobs
        $subq->[$i]->{posn} = $i;     # Adjust position inside job
        $subq->[$i]->draw();          # Redraw in new position
    }
    $job->{posn}  = undef;
    $job->{queue} = undef;
    return $job;
}

sub queue::submit {
    my $this = shift;
    my $job  = shift;
    $job->{t0}    = $T;                # When queued
    $job->{state} = state::JOB_PEND;
    ++$this->{count};
    $this->insert($job);
}

# Run the queue
sub queue::tick {
    my $this = shift;
    my $tun  = $this->{tunnel};

    # Advance running jobs
    my $r    = 0;
    my $nrun = @{$this->{qrun}};    # Number running jobs
    while ($r < $nrun) {
        my $job = $this->{qrun}->[$r];
        my $new_state = $job->tick($tun, $nrun);
        if ($new_state ne state::JOB_RUN) {
            $this->move_job($job, $new_state);
            --$nrun;
        }
        else {
            ++$r;
        }
    }

    my $do_poll = !($T % $this->{polling});
    if ( $do_poll ) {
        # Any open run slots, and anything wanting to run?
        while (@{$this->{qrun}} < $this->{maxrun}) {    # I have room
            # Take first highest priority job from queue
            my @sorted = 
                sort {&$QALG($a, $b)}               # Selected sorting algorithm
            grep {$_->{trun} <= $T}             # Must be job's time to run
            @{$this->{qpend}};
            last unless @sorted;                    # Exit if nothing eligible
            my $job = $sorted[0];                   # Take top sorted job
            $this->move_job($job, state::JOB_RUN, -1);
        }
    }
    
    $tun->{active} = @{$this->{qrun}};
}

# Return index (0-based) where the job belongs in sorted subqueue
# This is not a member function, just call it plainly
sub where {
    my $subq = shift;
    my $job  = shift;
    for my $i (0 .. $#$subq) {
        return $i if $job->{trun} < $subq->[$i]->{trun};
        return $i
            if ($job->{trun} == $subq->[$i]->{trun})
            && (
            $job->{jid} < $subq->[$i]->{jid}
            );
    }
    return scalar(@$subq);    # Goes to the end
}

# Return subqueue where this job should be
sub queue::whichq {
    my $this  = shift;
    my $state = shift;
    return
          $state == state::JOB_PEND ? $this->{qpend}
        : $state == state::JOB_RUN  ? $this->{qrun}
        : $state == state::JOB_DONE ? $this->{qdone}
        : $state == state::JOB_FAIL ? $this->{qfail}
        :                             undef;
}

package job;
use strict;
use utf8;
use Term::ANSIScreen qw/:color :cursor :screen :constants/;

my $JID = 0;

sub job::new {
    my $proto = shift;
    my $class = ref($proto) || $proto;    # Get the class name
    my ($x, $y) = @_;
    my $this = {
        t0       => 0,                                 # Time when queued
        trun     => 0,                                 # Earliest time I want to run
        subq     => undef,                             # Ref to the subqueue we're held in
        jid      => ++$JID,                            # My job ID
        state    => state::JOB_PEND,                   # Job state
        substate => state::SUB_INIT,                   # Job substate (for run)
        tries    => 0,                                 # Times I've tried to run
        maxtry   => 7,                                 # Limit to run attempts
        row      => undef,                             # Display row
        col      => undef,                             # Display column
        posn     => undef,                             # Position (0-based index) in sub-queue
        size     => size_dist(),                       # simulated job size, in bytes
        sofar    => 0,                                 # amount transferred so far, in bytes
        prio     => 1 + int(rand(3)),                     # Job priority, 1=best
    };
    bless $this, $class;
    $this->draw();
    return $this;
}

sub job::size_dist {
    # 1_000 + int(rand(512_000_000));
    my $size = int(rand(100));
    return ($size<=5) ? 512_000_000
        : ($size<=15) ? 100_000_000
        : ($size<=30) ? 1_000_000
        : ($size<=50) ? 100_000
        : 1_000;
}

sub job::clear_jid {
    $JID = 0;
}

# Draw the job onto the display.  Uses {state} and {posn} to find where
sub job::draw {
    my $this = shift;
    return if !defined $this->{posn};

    my $que = $this->{queue};
    my $max = $this->{state} == state::JOB_PEND ? $que->{maxpend}
            : $this->{state} == state::JOB_RUN  ? $que->{maxrun}
            : $this->{state} == state::JOB_DONE ? $que->{maxdone}
            : $this->{state} == state::JOB_FAIL ? $que->{maxfail}
            : 0 ;
    return if $this->{posn} >= $max;
    my ($row, $col) = rowcol($this->{state}, $this->{posn});

    my $jid   = $this->{jid};
    my $state = $this->{state};
    my $tries = $this->{tries};
    my $prio  = $this->{prio};

    my $color = CLEAR ON BLACK;
    $color .=
          ($prio == 1) ? RED
        : ($prio == 2) ? GREEN
        : ($prio == 3) ? YELLOW 
        :                WHITE;
    print $color;

    # If RUN state, show percentage of done
    if ($state == state::JOB_RUN) {
        my $pct = $this->{size} ? int(100 * $this->{sofar} / $this->{size}) : 0;
        $pct = 99 if $pct > 99;
        print locate($row + 1, $col), sprintf("%2d%%", $pct);
    }

    # We'll use underlines, bold, and reverse to indicate try count
    # These encode 5 bits for 0-31 tries; above that there's no differentiation
    $color .= REVERSE if $this->{tries} >= 16;
    $color .= BOLD if $this->{size} >= 100_000_000;
    $color .= ON_BLUE if ($this->{state} eq state::JOB_PEND && $this->{trun} < $T);
    my $u2 = ($this->{tries} >= 32) || ($this->{tries} & 4);
    my $u1 = ($this->{tries} >= 32) || ($this->{tries} & 2);
    my $u0 = ($this->{tries} >= 32) || ($this->{tries} & 1);
    my $jstr = sprintf("%3.3d", $jid);
    my $j2 = substr($jstr, -3, 1);
    my $j1 = substr($jstr, -2, 1);
    my $j0 = substr($jstr, -1, 1);
    print locate($row, $col);
    print $color;
    print UNDERLINE if $u2;    # underline on
    print $j2;
    print $color if $u2 && !$u1;    # underline off
    print UNDERLINE if $u1;         # underline on
    print $j1;
    print $color if $u1 && !$u0;    # turn off underline
    print UNDERLINE if $u0;         # underline off
    print $j0;

    # Remember where we drew it to make erase() easy
    $this->{row} = $row;
    $this->{col} = $col;
}

# Erase it from the screen
sub job::erase {
    my $this = shift;
    return if !defined $this->{row};
    print RESET, WHITE ON BLACK;
    print locate($this->{row},     $this->{col}), "   ";
    print locate($this->{row} + 1, $this->{col}), "   "
        if $this->{state} == state::JOB_RUN;
    $this->{row} = undef;
    $this->{col} = undef;
    return;
}

# return the display row & column for a job, based on state and position in subqueue
# This is not a class function, call it plainly
sub rowcol {
    my $state = shift;
    my $pos   = shift;    # 0-based

    if ($state == state::JOB_PEND) {
        my $ht  = 20;
        my $row = 4 + ($pos % $ht);
        my $col = 18 - 4 * int($pos / $ht);
        return ($row, $col);
    }
    if ($state == state::JOB_RUN) {
        my $row = 5 + $pos * 3;
        my $col = 24;
        return ($row, $col);
    }
    if ($state == state::JOB_DONE) {
        my $ht  = 20;
        my $row = 4 + ($pos % $ht);
        my $col = 40 + 4 * int($pos / $ht);
        return ($row, $col);
    }

    # FAIL state
    my $ht  = 20;
    my $row = 4 + ($pos % $ht);
    my $col = 69 + 4 * int($pos / $ht);
    return ($row, $col);
}

sub job::tick {
    my $this = shift;
    my $tun  = shift;
    my $par  = shift;
    
    # Tunnel down?  Or...
    # Per-job failure chance?
    if (($tun->{state} != state::TUN_UP)
        || (rand(10_000) < $tun->{jfail})) {

        # A job error happened: fail it or requeue it
        if ($this->{tries} >= $this->{maxtry}) {
            $this->{trun} = $T;
            return state::JOB_FAIL;
        }
        else {
            $this->{trun} = $T + 60 * $this->{tries};
            return state::JOB_PEND;
        }
    }

    # Transfer simulation
    if ($this->{substate} == state::SUB_INIT) {

        # skip one second for init phase, do nothing really
        $this->{substate} = state::SUB_XFER;
        return state::JOB_RUN;
    }
    elsif ($this->{substate} == state::SUB_XFER) {

        # Simulate transfer of one-second of data
        $this->{sofar} += int(0.83 * $tun->{Bps} / $par);
        $this->draw();    # So percentage updates

        # Is job done?
        if ($this->{sofar} >= $this->{size}) {
            $this->{sofar}   = $this->{size};
            $this->{substate} = state::SUB_WRAP;
        }
        return state::JOB_RUN;
    }
    elsif ($this->{substate} == state::SUB_WRAP) {
        $this->{trun} = $T;
        return state::JOB_DONE;
    }

}

package tunnel;
use strict;
use utf8;
use Term::ANSIScreen qw/:color :cursor :screen :constants/;

sub tunnel::new {
    my $proto = shift;
    my $class = ref($proto) || $proto;    # Get the class name
    my $this  = {
        row => 5,
        col => 29,
        Bps => 2_500_000,
        mtbf  => 1_000_000,
        jfail => 42,                      # job failure rate per chunk per 10,000.
        state => state::TUN_UP,
        active  => 0,                     # data send over tunnel
        tup   => 0,                       # time tunnel last came up
        count => 0,                       # bytes sent over tunel since tup
    };
    bless $this, $class;
    $this->draw();
    return $this;
}

sub tunnel::draw {
    my $this  = shift;
    my $clear = shift || 0;

    print CLEAR WHITE ON BLACK;
    if ($clear) {
        print locate($this->{row} + 0, $this->{col}), "         ";
        print locate($this->{row} + 1, $this->{col}), "         ";
        return;
    }
    my $top = $this->{state} ? "───────┘╲" : "·······┘╲";
    my $bot = $this->{state} ? "───────┐╱" : "·······┐╱";
    my $tic = $T % 8;
    if ($this->{state} && $tic && $this->{active}) {
        substr($top, $tic - 1) = "┬";
        substr($bot, $tic - 1) = "┴";
    }
    print $this->{state} ? BLUE : RED;
    print locate($this->{row} + 0, $this->{col}), $top;
    print locate($this->{row} + 1, $this->{col}), $bot;
    print YELLOW;
    print locate($this->{row} + 2, $this->{col}), "B/W Bps=";
    print locate($this->{row} + 3, $this->{col}), sprintf("%10d", $this->{Bps});
    print locate($this->{row} + 4, $this->{col}), "Tun MTBF=";
    print locate($this->{row} + 5, $this->{col}), sprintf("%10d", $this->{mtbf});
    print locate($this->{row} + 6, $this->{col}), "Job Fail=";
    print locate($this->{row} + 7, $this->{col}), sprintf("  %4d ‱", $this->{jfail});
}

sub tunnel::flip() {
    my $tun = shift;
    if ($tun->{state} == state::TUN_UP) {
        $tun->{state} = state::TUN_DN;
    }
    else {
        $tun->{state} = state::TUN_UP;
    }
    $tun->draw;
}

sub tunnel::tick() {
    my $this = shift;
    $this->draw();
}

1;

